import { aesEncrypt, aesDecrypt } from "../script/aesAlgorithm.js";

// Chuy·ªÉn vƒÉn b·∫£n th√†nh m·∫£ng byte (H·ªó tr·ª£ Unicode)
function textToBytes(text) {
    return Array.from(new TextEncoder().encode(text)); // Chuy·ªÉn Uint8Array th√†nh m·∫£ng s·ªë nguy√™n
}

// Chuy·ªÉn m·∫£ng byte th√†nh vƒÉn b·∫£n (H·ªó tr·ª£ Unicode)
function bytesToText(bytes) {
    return new TextDecoder().decode(new Uint8Array(bytes)); // Chuy·ªÉn v·ªÅ chu·ªói UTF-8
}

// H√†m padding: l√†m ƒë·∫ßy d·ªØ li·ªáu sao cho ƒë·ªß b·ªôi s·ªë 16 byte
function padText(text) {
    let textBytes = textToBytes(text); // Chuy·ªÉn th√†nh bytes (UTF-8)
    let padLength = 16 - (textBytes.length % 16);
    let padding = new Array(padLength).fill(padLength); // M·∫£ng padding

    return textBytes.concat(padding); // Tr·∫£ v·ªÅ m·∫£ng byte ƒë√£ padding
}

// H√†m unpadding: lo·∫°i b·ªè padding sau khi gi·∫£i m√£
function unpadText(paddedBytes) {
    let padLength = paddedBytes[paddedBytes.length - 1]; // L·∫•y s·ªë padding t·ª´ cu·ªëi chu·ªói
    let textBytes = paddedBytes.slice(0, -padLength); // C·∫Øt b·ªè padding
    return bytesToText(textBytes); // Chuy·ªÉn v·ªÅ UTF-8 string
}

function toStateMatrix(input) {
    let state = [];
    for (let i = 0; i < 4; i++) {
        state[i] = input.slice(i * 4, (i + 1) * 4);
    }
    return state;
}

const plaintext = "Xin ch√†o b·∫°n kh·ªèe kh√¥ng?";
const plaintext2 = "Êó©ÂÆâ‰∏≠ÂúãÔºåÊàëÊ≠£Âú®ÂêÉÂÜ∞Ê∑áÊ∑ã";
const plaintext3 = '‡§®‡§Æ‡§∏‡•ç‡§§‡•á ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ, ‡§Æ‡•à‡§Ç ‡§Ö‡§¨ ‡§∏‡§ø‡§Ç‡§ó‡§≤ ‡§π‡•Ç‡§Å üó£üî•'
const key = "SecretAES128Key@"
const iv = "MyInitialVector@"

function aesEncryptText(plaintext, key) {
    let bytes = padText(plaintext); // ƒê·∫£m b·∫£o ƒë·ªß b·ªôi s·ªë c·ªßa 16 byte
    let ciphertext = [];
  
    for (let i = 0; i < bytes.length; i += 16) {
      let block = bytes.slice(i, i + 16);
      ciphertext.push(aesEncrypt(block, key));
    }
    return ciphertext;
}
  
function aesDecryptText(ciphertext, key) {
    let decryptedBytes = [];
  
    for (let i = 0; i < ciphertext.length; i++) {
      let state = aesDecrypt(ciphertext[i], key);
      decryptedBytes.push(...state.flat()); // Chuy·ªÉn ma tr·∫≠n 4x4 v·ªÅ m·∫£ng 1D
    }
  
    let text = unpadText(decryptedBytes);
    return text;
}

function xorBlocks(block1, block2) {
    return block1.map((byte, i) => byte ^ block2[i]);
}

function aesEncryptCBC(plaintext, key, iv) {
    let bytes = padText(plaintext);
    let ciphertext = [];
    let prevBlock = iv; // Kh·ªëi IV ban ƒë·∫ßu
  
    for (let i = 0; i < bytes.length; i += 16) {
      let block = bytes.slice(i, i + 16);
      let xoredBlock = xorBlocks(block, prevBlock); // XOR v·ªõi kh·ªëi tr∆∞·ªõc ƒë√≥
      let encryptedBlock = aesEncrypt(xoredBlock, key);
      ciphertext.push(encryptedBlock);
      prevBlock = encryptedBlock; // C·∫≠p nh·∫≠t kh·ªëi tr∆∞·ªõc cho v√≤ng ti·∫øp theo
    }
  
    return [iv, ...ciphertext]; // Tr·∫£ v·ªÅ IV + ciphertext ƒë·ªÉ gi·∫£i m√£ ƒë√∫ng
}

function aesDecryptCBC(ciphertext, key) {
    let iv = ciphertext[0]; // L·∫•y IV t·ª´ ciphertext
    let decryptedText = [];
    let prevBlock = iv;

    for (let i = 1; i < ciphertext.length; i++) {
        let decryptedBlock = aesDecrypt(ciphertext[i], key); 
        decryptedBlock = decryptedBlock.flat(); // Ph·∫≥ng h√≥a ma tr·∫≠n 4x4

        let xoredBlock = xorBlocks(decryptedBlock, prevBlock); // XOR v·ªõi kh·ªëi tr∆∞·ªõc ƒë√≥
        decryptedText.push(...xoredBlock);
        prevBlock = ciphertext[i]; // C·∫≠p nh·∫≠t kh·ªëi tr∆∞·ªõc cho v√≤ng l·∫∑p ti·∫øp theo
    }

    let text = unpadText(decryptedText);
    return text; // Lo·∫°i b·ªè padding v√† chuy·ªÉn v·ªÅ text
}

console.log('Test byteToText v√† textToByte');
console.log(textToBytes(plaintext));
console.log(bytesToText(textToBytes(plaintext)));

console.log(textToBytes(plaintext2));
console.log(bytesToText(textToBytes(plaintext2)));
console.log('Test OK');
console.log('Test pad v√† unpad');
console.log(padText(plaintext));
console.log(padText(plaintext2));
console.log(unpadText(padText(plaintext2)));
console.log(unpadText(padText(plaintext)));
console.log('Test OK');
const ciphertext = aesEncryptText(plaintext3,textToBytes(key));
console.log(ciphertext);
const decryptedText = aesDecryptText(JSON.parse(JSON.stringify(ciphertext)),textToBytes(key))
console.log(decryptedText);

const ciphertextCBC = aesEncryptCBC(plaintext2,textToBytes(key),textToBytes(iv));
console.log(ciphertextCBC);
const decryptedTextCBC = aesDecryptCBC(JSON.parse(JSON.stringify(ciphertextCBC)),textToBytes(key))
console.log(decryptedTextCBC);